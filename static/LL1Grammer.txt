Program -> DeclarationList eof #set_main .

DeclarationList -> DeclarationList_1 .

DeclarationList_1 -> Declaration DeclarationList_1
                    |.

Declaration -> TypeSpecifier #plast FTypeSpecifier_2 .

FTypeSpecifier_2 -> id #plast Fid_4 #vardec.

Fid_4 -> Fid_1
        |( #fundec Params ) CompoundStmt .

VarDeclaration -> TypeSpecifier FTypeSpecifier .

FTypeSpecifier -> id Fid_1 .

Fid_1 -> ; #plast
        |bropen num #pnum brclose #plast ; .

TypeSpecifier -> void
                |int .

FunDeclaration -> TypeSpecifier id ( Params ) CompoundStmt .

Params -> int #plast FTypeSpecifier_1 #param_dec ParamList_1
         |void #plast FParam .

FParam -> FTypeSpecifier_1 #param_dec ParamList_1
         |#pop_1.

ParamList -> Param ParamList_1 .

ParamList_1 -> comma Param #param_dec ParamList_1
              |.

Param -> TypeSpecifier #plast FTypeSpecifier_1 .

FTypeSpecifier_1 -> id #plast Fid_2 .

Fid_2 ->
        |bropen brclose #plast .

CompoundStmt -> cropen DeclarationList StatementList crclose .

StatementList -> StatementList_1 .

StatementList_1 -> Statement StatementList_1
                  |.

Statement -> ExpressionStmt
            |CompoundStmt
            |SelectionStmt
            |IterationStmt
            |ReturnStmt
            |SwitchStmt .

ExpressionStmt -> Expression #pop_1;
                 |continue #continue_;
                 |break #break_;
                 |; .

SelectionStmt -> if ( Expression ) #save Statement #save_jpf else Statement #jp .

IterationStmt -> while #plast ( Expression ) #save Statement #breaks_jpf_jp .

ReturnStmt -> return Freturn #func_return.

Freturn ->
;
          |Expression #set_result; .

SwitchStmt -> switch ( Expression ) cropen CaseStmts DefaultStmt #jp crclose .

CaseStmts -> #null CaseStmts_1 .

CaseStmts_1 -> CaseStmt CaseStmts_1
              |.

CaseStmt -> case num #eq_save: StatementList #jp_save_jpf .

DefaultStmt -> default : StatementList
              |.

Expression -> id #plast FExpr
             |Term_2 AdditiveExpression_1 FAdditiveExpression .

FExpr -> Fid #calc_addr FExpr_1
        |( Args ) #func_jmp  Term_1 AdditiveExpression_1 FAdditiveExpression .

FExpr_1 -> eq Expression #assign_expr
          | Term_1 AdditiveExpression_1 FAdditiveExpression .

Fid ->
      |bropen Expression brclose .

SimpleExpression -> AdditiveExpression FAdditiveExpression .

FAdditiveExpression -> Relop #plast AdditiveExpression #calc_relop
                      |.

Relop -> <
        |== .

AdditiveExpression -> Term AdditiveExpression_1 .

AdditiveExpression_1 -> Addop Term #calc_addop AdditiveExpression_1
                       |.

Addop -> + #plast
        |minus #plast .

Term -> SignedFactor Term_1 .

Term_1 -> * SignedFactor #calc_mult Term_1
         |.

Term_2 -> SignedFactor_2 Term_1 .

SignedFactor -> #null Factor #calc_sign
               |+ #plast Factor #calc_sign
               |minus #plast Factor #calc_sign.

SignedFactor_2 ->#null Factor_2 #calc_sign
               |+ #plast Factor #calc_sign
               |minus #plast Factor #calc_sign.

Factor -> ( Expression )
         |id #plast Fid_3
         |num #pnum .

Factor_2 -> ( Expression )
         |num #pnum.

Fid_3 -> Fid
        |( Args ) #func_jmp .

Call -> id ( Args ) .

Args -> ArgList
       |.

ArgList -> Expression #arg ArgList_1 .

ArgList_1 -> comma Expression #arg ArgList_1
            |.