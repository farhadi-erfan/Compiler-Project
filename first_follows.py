firsts = {
    'Program': ['eof', 'int', 'void'],
    'DL': ['int', 'void'],
    'DL1': ['int', 'void'],
    'Dec': ['int', 'void'],
    'FTS2': ['eps'],
    'VarDec': ['int', 'void'],
    'FTS': ['eps'],
    'FID1': [';', '['],
    'TS': ['int', 'void'],
    'FDec': ['int', 'void'],
    'Params': ['void', 'int'],
    'FVoid': ['eps'],
    'PL': ['int', 'void'],
    'PL1': [','],
    'Param': ['int', 'void'],
    'FTS1': ['eps'],
    'FID2': ['['],
    'CompStmt': ['{'],
    'SL': ['continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', 'minus', '('],
    'SL1': ['continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', 'minus', '('],
    'Stmt': ['continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', 'minus', '('],
    'ExpStmt': ['continue', 'break', '+', 'minus', '('],
    'SelStmt': ['if'],
    'IterStmt': ['while'],
    'RetStmt': ['return'],
    'Fret': [';', '+', '-', '('],
    'SwitchStmt': ['switch'],
    'CaseStmts': ['case'],
    'CaseStmts_1': ['case'],
    'CaseStmt': ['case'],
    'DefaultStmt': ['default'],
    'Expr': ['+', 'minus', '('],
    'Var': ['eps'],
    'FID': ['['],
    'SimpleExpr': ['+', 'minus', '('],
    'FAdditiveExpr': ['<', '=='],
    'Relop': ['<', '=='],
    'AdditiveExpr': ['+', 'minus', '('],
    'AdditiveExpr_1': ['+', 'minus'],
    'Addop': ['+', 'minus'],
    'Term': ['+', 'minus', '('],
    'Term_1': ['*'],
    'SignedFactor': ['+', 'minus', '('],
    'Factor': ['('],
    'Call': ['eps'],
    'Args': ['+', 'minus', '('],
    'ArgList': ['+', 'minus', '('],
    'ArgList_1': [','],
    'ID': ['eps'],
    'Num': ['eps']
}

follows = {
    'Program': ['eps'],
    'DL1': ['eof', 'continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'DL': ['eof', 'continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'Dec': ['int', 'void', 'eof', 'continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'FTS2': ['int', 'void', 'eof', 'continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'VarDec': ['eps'],
    'FTS': ['int', 'void', 'eof', 'continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'FID1': ['int', 'void', 'eof', 'continue', 'break', ';', '{', 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'TS': ['eps'],
    'FDec': ['eps'],
    'Params': [')'],
    'FVoid': [')'],
    'PL': ['eps'],
    'PL1': [')'],
    'Param': [')', ','],
    'FTS1': [')', ','],
    'FID2': [')', ','],
    'CompStmt': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
                 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'SL': ['case', 'default', '}'],
    'SL1': ['case', 'default', '}'],
    'Stmt': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
                'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'ExpStmt': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
                'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'SelStmt': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
                'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'IterStmt': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
                 'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'RetStmt': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
                'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'Fret': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
             'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'SwitchStmt': ['case', 'default', 'else','int', 'void', 'eof', 'continue', 'break', ';', '{',
                   'if', 'while', 'return', 'switch', '+', '-', '(', '}'],
    'CaseStmts': ['default', '}'],
    'CaseStmts_1': ['default', '}'],
    'CaseStmt': ['case', 'default', '}'],
    'DefaultStmt': ['}'],
    'Expr': [';', ']', ')', ','],
    'Var': ['*', '+', '-', '<', '==', '=', ';', ']', ')', ','],
    'FID': ['*', '+', '-', '<', '==', '=', ';', ']', ')', ','],
    'SimpleExpr': [';', ']', ')', ','],
    'FAdditiveExpr': [';', ']', ')', ','],
    'Relop': ['+', '-', '('],
    'AdditiveExpr': ['less', 'deq', ';', ']', ')', ','],
    'AdditiveExpr_1': ['less', 'deq', ';', ']', ')', ','],
    'Addop': ['+', '-', '('],
    'Term': ['+', '-', '<', '==', ';', ']', ')', ','],
    'Term_1': ['+', '-', '<', '==', ';', ']', ')', ','],
    'SignedFactor': ['*', '+', '-', '<', '==', ';', ']', ')', ','],
    'Factor': ['*', '+', '-', '<', '==', ';', ']', ')', ','],
    'Call': ['*', '+', '-', '<', '==', ';', ']', ')', ','],
    'Args': [')'],
    'ArgList': [')'],
    'ArgList_1': [')'],
    'ID': ['*', '+', '-', '<', '==', '=', ';', ']', ')', ',', ';', '[', '('],
    'Num': ['*', '+', '-', '<', '==', ';', ']', ')', ',']
}

nullables = ['DL1', 'FVoid', 'PL1', 'FID2', 'DL', 'SL1', 'CaseStmts', 'CaseStmts_1', 'DefaultStmt',
             'SL', 'FID', 'FAdditiveExpr', 'AdditiveExpr_1', 'Term_1', 'Args', 'ArgList_1']

error_messages = {
    'Program': 'Give a correct program.',
    'DL': 'Decleration is not correct.',
    'DL1': 'Decleration is not correct.',
    'Dec': 'Decleration is not correct.',
    'FTS2': 'Type specification is not correct.',
    'FTS': 'Type specification is not correct.',
    'FID1': 'Type specification is not correct.',
    'Params': 'Parameter specification is not correct.',
    'FVoid': 'Void is not used correct.',
    'PL1': 'Parameter list specification is not correct.',
    'Param': 'Parameter specification is not correct.',
    'FTS1': 'Type specification is not correct.',
    'FID2': 'ID is not correct.',
    'CompStmt': 'Statement specification is not correct.',
    'SL': 'Statement specification is not correct.',
    'SL1': 'Statement specification is not correct.',
    'Stmt': 'Statement specification is not correct.',
    'ExpStmt': 'Expression specification is not correct.',
    'SelStmt': 'Statement specification is not correct.',
    'IterStmt': 'Statement specification for loop is not correct.',
    'RetStmt': 'Statement specification for return is not correct.',
    'Fret': 'Statement specification for return is not correct.',
    'SwitchStmt': 'Statement specification for switch is not correct.',
    'CaseStmts': 'Statement specification for case is not correct.',
    'CaseStmts_1': 'Statement specification for case is not correct.',
    'CaseStmt': 'Statement specification for case is not correct.',
    'DefaultStmt': 'Statement specification for default is not correct.',
    'Expr': 'Statement specification for expression is not correct.',
    'Var': 'Variable usage is not correct.',
    'FID': 'ID specification is not correct.',
    'SimpleExpr': 'Expression is not correct.',
    'FAdditiveExpr': 'Expression is not correct.',
    'Relop': 'Expression is not correct.',
    'AdditiveExpr': 'Algebraic expression is not correct.',
    'AdditiveExpr_1': 'Algebraic expression is not correct.',
    'Addop': 'Algebraic expression for sum and minus is not correct.',
    'Term': 'Algebraic expression for sum and minus is not correct.',
    'Term_1': 'Algebraic expression for product is not correct.',
    'SignedFactor': 'Algebraic expression for is not correct.',
    'Factor': 'Algebraic expression is not correct.',
    'Call': 'Calling is not correct.',
    'Args': 'Argument expression is not correct.',
    'ArgList': 'Argument expression is not correct.',
    'ArgList_1': 'Argument expression is not correct.',
    'ID': 'ID expression is not correct.',
    'Num': 'Number expression is not correct.'
}